{"version":3,"sources":["components/Navbar.js","components/Header.js","components/Wrapper.js","components/Card.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["styles","navbar","backgroundColor","color","height","fontSize","container","float","width","card","textAlign","paddingTop","Navbar","props","react_default","a","createElement","className","style","score","highScore","header","img","Header","alt","src","Wrapper","children","Card","onClick","name","image","p","marginBottom","Footer","clicked","App","state","characters","shuffle","array","i","j","temp","length","Math","floor","random","_this","setState","console","log","localScore","localClicked","counter","localhighScore","forEach","clickId","alert","push","_this2","this","components_Wrapper","components_Navbar","components_Header","map","character","index","components_Card","key","id","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53a948f4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst styles = {\n  navbar: {\n    backgroundColor: \"gold\",\n    color: \"blue\",\n    height: \"70px\",\n    fontSize: \"24px\"\n  },\n  container: {\n    float: \"left\",\n    width: \"25%\"\n  },\n  card: {\n    textAlign: \"center\",\n    paddingTop: \"20px\"\n  }\n};\n\nconst Navbar = props => (\n  <div>\n    <nav className=\"navbar fixed-top\" style={styles.navbar}>\n      <ul className=\"nav navbar-nav navbar-left\">\n        <li>Simpsons Clicky!</li>\n      </ul>\n      <ul className=\"nav navbar-nav navbar-right\">\n        <li>\n          Score: {props.score} | High Score: {props.highScore}\n        </li>\n      </ul>\n    </nav>\n  </div>\n);\n\nexport default Navbar;\n","import React from \"react\";\n\nconst styles = {\n  header: {\n    height: \"320px\",\n    textAlign: \"center\",\n    backgroundColor: \"blue\",\n    color: \"gold\",\n    paddingTop: \"70px\"\n  },\n  img: {\n      width: \"250px\",\n      paddingTop: \"20px\"\n  }\n};\n\nconst Header = () => (\n  <div style={styles.header}>\n    <img alt=\"simpsons logo\" src=\"./images/simpsons-logo.png\" style={styles.img} />\n    <h3>\n      Click on a character to earn points &ndash; but don't click anybody more\n      than once!\n    </h3>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\n\nconst styles = {\n  container: {\n    float: \"left\",\n    width: \"25%\",\n    textAlign: \"center\",\n    paddingTop: \"20px\"\n  },\n  card: {\n    textAlign: \"center\",\n    paddingTop: \"20px\"\n  },\n  navbar: {\n    backgroundColor: \"gold\",\n    color: \"blue\",\n    height: \"70px\",\n    fontSize: \"24px\"\n  }\n};\n\nconst Card = props => {\n  return (\n    <div className=\"card\" style={styles.container} onClick={() => props.onClick(props.name)}>\n      <div className=\"img-container\">\n        <img src={props.image} alt={props.name} />\n        <p>{props.name}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nconst styles = {\n  p: {\n    marginBottom: \"0px\"\n  }\n};\n\nconst Footer = () => (\n  <div>\n    <nav className=\"navbar bottom navbar-light bg-light\">\n      <p style={styles.p}>\n        Simpsons Clicky &mdash; Powered by React\n      </p>\n    </nav>\n  </div>\n);\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport characters from \"./characters.json\";\n\nconst clicked = [];\nconst score = 0;\nconst highScore = 0;\n\nclass App extends Component {\n  state = {\n    characters,\n    clicked,\n    score,\n    highScore\n  };\n\n  shuffle = array => {\n    let i = 0;\n    let j = 0;\n    let temp = null;\n\n    for (i = array.length - 1; i > 0; i -= 1) {\n      j = Math.floor(Math.random() * (i + 1));\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    this.setState({ characters: array });\n  };\n\n  onClick = name => {\n    console.log(name);\n    let localScore = this.state.score;\n    let localClicked = this.state.clicked;\n    let counter = 0;\n    let localhighScore = this.state.highScore;\n    this.state.clicked.forEach(function(clickId) {\n      if (clickId === name) {\n        counter++;\n      }\n    });\n    if (counter > 0) {\n      localScore = 0;\n      localClicked = [];\n      alert(\"Sorry, you already clicked on them! Try again!\");\n    } else {\n      localScore += 1;\n      localClicked.push(name);\n      if (localScore > localhighScore) {\n        localhighScore = localScore;\n      }\n      if (localScore === 16) {\n        alert(\"Congratulations! You are a Simpsons wizard!\");\n        localScore = 0;\n        localClicked = [];\n      }\n    }\n    this.setState({ clicked: localClicked });\n    this.setState({ score: localScore });\n    this.setState({ highScore: localhighScore });\n    this.shuffle(this.state.characters);\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar score={this.state.score} highScore={this.state.highScore} />\n        <Header />\n        {this.state.characters.map((character, index) => (\n          <Card\n            key={index}\n            id={character.id}\n            name={character.name}\n            image={character.image}\n            onClick={this.onClick}\n          />\n        ))}\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
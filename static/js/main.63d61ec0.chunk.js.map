{"version":3,"sources":["components/Wrapper.js","components/Header.js","components/CharacterCard.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","styles","header","height","textAlign","backgroundColor","color","paddingTop","img","width","Header","style","alt","src","container","float","card","navbar","fontSize","CharacterCard","state","clickCount","highScore","handleIncrement","_this","setState","_this2","this","shuffledCharacters","array","i","length","j","Math","floor","random","temp","shuffleArray","characters","class","map","character","onClick","key","id","image","name","React","Component","Footer","href","App","components_Wrapper","components_Header","components_CharacterCard","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAIeA,EAFC,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,WCAnDC,EAAS,CACbC,OAAQ,CACNC,OAAQ,QACRC,UAAW,SACXC,gBAAiB,OACjBC,MAAO,OACPC,WAAY,QAEdC,IAAK,CACDC,MAAO,QACPF,WAAY,SAcHG,EAVA,kBACbd,EAAAC,EAAAC,cAAA,OAAKa,MAAOV,EAAOC,QACjBN,EAAAC,EAAAC,cAAA,OAAKc,IAAI,gBAAgBC,IAAI,6BAA6BF,MAAOV,EAAOO,MACxEZ,EAAAC,EAAAC,cAAA,qIChBEG,EAAS,CACba,UAAW,CACTC,MAAO,OACPN,MAAO,OAETO,KAAM,CACJZ,UAAW,SACXG,WAAY,QAEdU,OAAQ,CACNZ,gBAAiB,OACjBC,MAAO,OACPH,OAAQ,OACRe,SAAU,aA8DCC,6MA9CbC,MAAQ,CACNC,WAAY,EACZC,UAAW,KAGbC,gBAAkB,WAChBC,EAAKC,SAAS,CACZJ,WAAYG,EAAKJ,MAAMC,WAAa,EACpCC,UAAWE,EAAKJ,MAAME,UAAY,6EAI7B,IAAAI,EAAAC,KACDC,EAzBV,SAAsBC,GAEpB,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,EAiBsBQ,CAAaV,KAAKhC,MAAM2C,YAEnD,OACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBY,MAAOV,EAAOgB,QAC9CrB,EAAAC,EAAAC,cAAA,MAAIyC,MAAM,8BACR3C,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAAA,MAAIyC,MAAM,+BACR3C,EAAAC,EAAAC,cAAA,oBACU6B,KAAKP,MAAMC,WADrB,kBACgDM,KAAKP,MAAME,aAK9DM,EAAmBY,IAAI,SAAAC,GAAS,OAC/B7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOY,MAAOV,EAAOa,WAClClB,EAAAC,EAAAC,cAAA,OACEC,UAAU,gBACV2C,QAAShB,EAAKH,gBACdZ,MAAOV,EAAOe,KACd2B,IAAKF,EAAUG,IAEfhD,EAAAC,EAAAC,cAAA,OAAKc,IAAI,YAAYC,IAAK4B,EAAUI,QACpCjD,EAAAC,EAAAC,cAAA,SAAI2C,EAAUK,kBAtCAC,IAAMC,WCnBnBC,EAVA,kBACbrD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAemD,KAAK,KAAjC,8CCWSC,EARH,kBACVvD,EAAAC,EAAAC,cAACsD,EAAD,KACExD,EAAAC,EAAAC,cAACuD,EAAD,MACAzD,EAAAC,EAAAC,cAACwD,EAAD,CAAehB,WAAYA,IAC3B1C,EAAAC,EAAAC,cAACyD,EAAD,QCAgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.63d61ec0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\n\nconst styles = {\n  header: {\n    height: \"320px\",\n    textAlign: \"center\",\n    backgroundColor: \"blue\",\n    color: \"gold\",\n    paddingTop: \"70px\"\n  },\n  img: {\n      width: \"250px\",\n      paddingTop: \"20px\"\n  }\n};\n\nconst Header = () => (\n  <div style={styles.header}>\n    <img alt=\"simpsons logo\" src=\"./images/simpsons-logo.png\" style={styles.img} />\n    <h3>\n      Click on a character to earn points &ndash; but don't click anybody more\n      than once!\n    </h3>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\n// import Navbar from \"./Navbar\";\n\nconst styles = {\n  container: {\n    float: \"left\",\n    width: \"25%\"\n  },\n  card: {\n    textAlign: \"center\",\n    paddingTop: \"20px\"\n  },\n  navbar: {\n    backgroundColor: \"gold\",\n    color: \"blue\",\n    height: \"70px\",\n    fontSize: \"24px\"\n  }\n};\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nclass CharacterCard extends React.Component {\n  state = {\n    clickCount: 0,\n    highScore: 0\n  };\n\n  handleIncrement = () => {\n    this.setState({\n      clickCount: this.state.clickCount + 1,\n      highScore: this.state.highScore + 1\n    });\n  };\n\n  render() {\n    const shuffledCharacters = shuffleArray(this.props.characters);\n\n    return (\n      <div>\n        <nav className=\"navbar fixed-top\" style={styles.navbar}>\n          <ul class=\"nav navbar-nav navbar-left\">\n            <li>Simpsons Clicky!</li>\n          </ul>\n          <ul class=\"nav navbar-nav navbar-right\">\n            <li>\n              Score: {this.state.clickCount} | High Score: {this.state.highScore}              \n            </li>\n          </ul>\n        </nav>\n\n        {shuffledCharacters.map(character => (\n          <div className=\"card\" style={styles.container}>\n            <div\n              className=\"img-container\"\n              onClick={this.handleIncrement}\n              style={styles.card}\n              key={character.id}\n            >\n              <img alt=\"character\" src={character.image} />\n              <p>{character.name}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterCard;\n","import React from \"react\";\n\nconst Footer = () => (\n  <div>\n    <nav className=\"navbar bottom navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Simpsons Clicky &mdash; Powered by React\n      </a>\n    </nav>\n  </div>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport characters from \"./characters.json\";\nimport Wrapper from \"./components/Wrapper\";\n// import Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Footer from \"./components/Footer\";\n\nconst App = () => (\n  <Wrapper>\n    <Header />\n    <CharacterCard characters={characters} />\n    <Footer />\n  </Wrapper>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}